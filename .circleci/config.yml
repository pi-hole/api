version: 2

.job_template: &job_template
  docker:
    - image: pihole/api-build:v2-$CIRCLE_JOB
  steps:
    - checkout
    - restore_cache:
        keys:
          # Find a cache corresponding to this specific target and Cargo.lock checksum.
          # There are two dashes used between job and checksum to avoid x86_64 using the x86_64-musl cache
          - v5-cargo-{{ .Environment.CIRCLE_JOB }}--{{ checksum "Cargo.lock" }}
    - run:
        name: "Download Web"
        command: |
          root="https://ftl.pi-hole.net"
          file="pihole-web.tar.gz"

          # Try the branch of the same name, then dev, then master, and if none exist then fail
          if curl --output /dev/null --silent --head --fail "$root/$CIRCLE_BRANCH/$file"; then
            branch="$CIRCLE_BRANCH"
          elif curl --output /dev/null --silent --head --fail "$root/development/$file"; then
            branch="development"
          elif curl --output /dev/null --silent --head --fail "$root/master/$file"; then
            branch="master"
          else
            echo "Could not find any web builds. Luckily they are not required for this CI yet."
            exit 0
          fi

          echo "Using the $branch branch"

          # If web directory already exists, empty it out
          rm -rf web
          # Uncompress the files to the "web" folder
          curl "$root/$branch/$file" -o web.tar.gz
          mkdir web
          tar -xzf web.tar.gz -C web
    - run:
        name: "Code Style Check"
        command: |
          [[ "$CIRCLE_JOB" != "x86_64-musl" ]] || cargo fmt -- --check
    - run:
        name: "Code Lint Check"
        command: |
          [[ "$CIRCLE_JOB" != "x86_64-musl" ]] || cargo clippy --all-targets --all-features -- -D clippy::all
    - run:
        name: "Cargo-Audit"
        command: |
          [[ "$CIRCLE_JOB" != "x86_64-musl" ]] || cargo install --force cargo-audit && cargo audit
    - run:
        name: "Build"
        command: |
          time cargo build --release --target $TARGET
          cp target/$TARGET/release/pihole_api ${BIN_NAME}
    - run:
        name: "Test"
        command: |
          if [[ "$CIRCLE_JOB" != "x86_64-musl" ]]; then
            exit 0
          fi

          # These flags are used so the test results can be used for code coverage
          export CARGO_INCREMENTAL=0
          export RUSTFLAGS="-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Zno-landing-pads"

          # Delete previous code coverage info
          find target -name *.gcda -type f -delete

          time cargo test
    - run:
        name: "Upload Code Coverage"
        command: |
          if [[ "$CIRCLE_JOB" != "x86_64-musl" ]]; then
            exit 0
          fi

          grcov target -t lcov --branch --ignore-not-existing --ignore-dir "/*" --ignore-dir "*build.rs" -o lcov.info
          bash <(curl -s https://codecov.io/bash) -f lcov.info
    - run:
        name: "Build DEB"
        command: |
          export DEB_BUILD_OPTIONS=nostrip TARGET_PROFILE=release
          dpkg-buildpackage -b -a $DEB_ARCH
          mv ../pihole-api*.deb .
          [[ "$CIRCLE_JOB" != "arm" ]] || for file in pihole-api*.deb; do mv $file ${file//armhf/arm}; done
    - run:
        name: "Upload Artifacts"
        command: |
          [[ -z "$FTL_SECRET" || "$CIRCLE_PR_NUMBER" != "" ]] && exit 0
          DIR="${CIRCLE_TAG:-${CIRCLE_BRANCH}}"

          sha1sum ${BIN_NAME} > ${BIN_NAME}.sha1
          cat ${BIN_NAME}.sha1

          mkdir -p ~/.ssh
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
          sftp -b - $SSH_USER@$SSH_HOST <<< "-mkdir ${DIR}
          put ${BIN_NAME}* ${DIR}
          put pihole-api*.deb ${DIR}"

          if [[ "$CIRCLE_JOB" == "x86_64-musl" ]]; then
            echo "${CIRCLE_SHA1:0:7}" > API_HASH
            sftp $SSH_USER@$SSH_HOST <<< "put API_HASH ${DIR}"
          fi
      # Save the files necessary for building the RPM
    - persist_to_workspace:
        root: .
        paths:
          - target/*/release/pihole_api
          - Makefile
          - LICENSE
          - debian/pihole-API.service
          - rpm/pihole-api.spec
    - save_cache:
        key: v5-cargo-{{ .Environment.CIRCLE_JOB }}--{{ checksum "Cargo.lock" }}
        paths:
          - target
          - /root/.cargo

.rpm_template: &rpm_template
  docker:
    - image: pihole/rpm-builder:v1
  steps:
    - attach_workspace:
        at: .
    - run:
        name: "Build RPM"
        command: |
          export TARGET_PROFILE=release
          mkdir -p ~/rpmbuild/{SOURCES,SPECS}
          mv rpm/pihole-api.spec ~/rpmbuild/SPECS
          mv * ~/rpmbuild/SOURCES
          rpmbuild -bb ~/rpmbuild/SPECS/pihole-api.spec --target $RPM_ARCH
    - run:
        name: "Upload"
        command: |
          [[ -z "$FTL_SECRET" || "$CIRCLE_PR_NUMBER" != "" ]] && exit 0
          DIR="${CIRCLE_TAG:-${CIRCLE_BRANCH}}"
          mv ~/rpmbuild/RPMS/$RPM_ARCH/pihole-api*.rpm .
          mkdir -p ~/.ssh
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
          sftp -b - $SSH_USER@$SSH_HOST <<< "-mkdir ${DIR}
          put pihole-api*.rpm ${DIR}"

jobs:
  arm:
    <<: *job_template
    environment:
      BIN_NAME: "pihole-API-arm-linux-gnueabi"
      TARGET: "arm-unknown-linux-gnueabi"
      DEB_ARCH: "armhf"

  armhf:
    <<: *job_template
    environment:
      BIN_NAME: "pihole-API-arm-linux-gnueabihf"
      TARGET: "armv7-unknown-linux-gnueabihf"
      DEB_ARCH: "armhf"

  armhf-rpm:
    <<: *rpm_template
    environment:
      TARGET: "armv7-unknown-linux-gnueabihf"
      RPM_ARCH: "armhfp"

  aarch64:
    <<: *job_template
    environment:
      BIN_NAME: "pihole-API-aarch64-linux-gnu"
      TARGET: "aarch64-unknown-linux-gnu"
      DEB_ARCH: "arm64"

  aarch64-rpm:
    <<: *rpm_template
    environment:
      TARGET: "aarch64-unknown-linux-gnu"
      RPM_ARCH: "aarch64"

  x86_64-musl:
    <<: *job_template
    environment:
      BIN_NAME: "pihole-API-linux-x86_64"
      TARGET: "x86_64-unknown-linux-musl"
      DEB_ARCH: "amd64"

  x86_64-musl-rpm:
    <<: *rpm_template
    environment:
      TARGET: "x86_64-unknown-linux-musl"
      RPM_ARCH: "x86_64"

  x86_32:
    <<: *job_template
    environment:
      BIN_NAME: "pihole-API-linux-x86_32"
      TARGET: "i686-unknown-linux-gnu"
      DEB_ARCH: "i386"

  x86_32-rpm:
    <<: *rpm_template
    environment:
      TARGET: "i686-unknown-linux-gnu"
      RPM_ARCH: "i386"

workflows:
  version: 2
  build:
    jobs:
      - arm
      - armhf
      - armhf-rpm:
          requires:
            - armhf
      - aarch64
      - aarch64-rpm:
          requires:
            - aarch64
      - x86_64-musl
      - x86_64-musl-rpm:
          requires:
            - x86_64-musl
      - x86_32
      - x86_32-rpm:
          requires:
            - x86_32
